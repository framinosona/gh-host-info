name: Build Information Collection

on:
  workflow_dispatch:
  push:
    branches: ["*"]

env:
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "1"
  DOTNET_NOLOGO: "1"
  DOTNET_CLI_TELEMETRY_OPTOUT: "1"
  DOTNET_CLI_HOME: ${{ github.workspace }}/.dotnet-home

# Enable concurrency to avoid overlapping runs
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  collect-build-info:
    strategy:
      matrix:
        include:
          # https://docs.github.com/en/actions/reference/runners/github-hosted-runners
          - os: ubuntu-22.04
            name: "Ubuntu 22.04"
          - os: ubuntu-24.04
            name: "Ubuntu 24.04"
          - os: windows-2022
            name: "Windows Server 2022"
          - os: windows-2025
            name: "Windows Server 2025"
          - os: macos-13
            name: "macOS 13"
          - os: macos-14
            name: "macOS 14"
          - os: macos-15
            name: "macOS 15"

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4

    - name: Install MAUI workload
      if: runner.os != 'Linux'
      continue-on-error: true
      id: install-maui
      run: |
        dotnet workload install maui
        echo "maui=success" >> $GITHUB_OUTPUT
      shell: bash

    - name: Install MAUI Windows workload
      if: runner.os != 'Linux'
      continue-on-error: true
      id: install-maui-windows
      run: |
        dotnet workload install maui-windows
        echo "maui-windows=success" >> $GITHUB_OUTPUT
      shell: bash

    - name: Install MAUI Android workload
      if: runner.os != 'Linux'
      continue-on-error: true
      id: install-maui-android
      run: |
        dotnet workload install maui-android
        echo "maui-android=success" >> $GITHUB_OUTPUT
      shell: bash

    - name: Install MAUI iOS workload
      if: runner.os != 'Linux'
      continue-on-error: true
      id: install-maui-ios
      run: |
        dotnet workload install maui-ios
        echo "maui-ios=success" >> $GITHUB_OUTPUT
      shell: bash

    - name: Install MAUI MacCatalyst workload
      if: runner.os != 'Linux'
      continue-on-error: true
      id: install-maui-maccatalyst
      run: |
        dotnet workload install maui-maccatalyst
        echo "maui-maccatalyst=success" >> $GITHUB_OUTPUT
      shell: bash

    - name: "Generate output directory"
      if: always()
      shell: bash
      run: |
        mkdir -p "output/"
        echo '${{ toJson(github) }}' | sed 's/"token": *"[^"]*"/"token": "[REDACTED_FOR_SECURITY]"/g' > output/github.json
        echo '${{ toJson(runner) }}' | sed 's/"token": *"[^"]*"/"token": "[REDACTED_FOR_SECURITY]"/g' > output/runner.json
        echo '${{ toJson(secrets) }}' | sed 's/"token": *"[^"]*"/"[REDACTED_FOR_SECURITY]"/g' > output/secrets.json
        echo '${{ toJson(matrix) }}' | sed 's/"token": *"[^"]*"/"token": "[REDACTED_FOR_SECURITY]"/g' > output/matrix.json
        echo '${{ toJson(job) }}' | sed 's/"token": *"[^"]*"/"token": "[REDACTED_FOR_SECURITY]"/g' > output/job.json
        echo '${{ toJson(env) }}' | sed 's/"token": *"[^"]*"/"token": "[REDACTED_FOR_SECURITY]"/g' > output/env.json
        echo '${{ toJson(steps) }}' | sed 's/"token": *"[^"]*"/"token": "[REDACTED_FOR_SECURITY]"/g' > output/steps.json
        echo '${{ toJson(needs) }}' | sed 's/"token": *"[^"]*"/"token": "[REDACTED_FOR_SECURITY]"/g' > output/needs.json
        echo '${{ toJson(inputs) }}' | sed 's/"token": *"[^"]*"/"token": "[REDACTED_FOR_SECURITY]"/g' > output/inputs.json
        dotnet --info > output/dotnet-info.txt

        # Create workload installation summary
        cat > output/workload-summary.txt << 'EOF'
        # MAUI Workload Installation Summary

        ## Installation Results:
        - MAUI Core: ${{ steps.install-maui.outcome == 'success' && 'SUCCESS' || 'FAILED' }}
        - MAUI Windows: ${{ steps.install-maui-windows.outcome == 'success' && 'SUCCESS' || 'FAILED' }}
        - MAUI Android: ${{ steps.install-maui-android.outcome == 'success' && 'SUCCESS' || 'FAILED' }}
        - MAUI iOS: ${{ steps.install-maui-ios.outcome == 'success' && 'SUCCESS' || 'FAILED' }}
        - MAUI MacCatalyst: ${{ steps.install-maui-maccatalyst.outcome == 'success' && 'SUCCESS' || 'FAILED' }}

        ## Platform: ${{ matrix.os }}
        ## Date: $(date)
        EOF

    - name: Upload Build Information as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-info-${{ matrix.os }}
        path: "output/*.*"
        if-no-files-found: ignore

  generate-site:
    needs: collect-build-info
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Setup .NET
      uses: actions/setup-dotnet@v4

    - name: Install DocFX
      shell: bash
      run: |
        # Install DocFX as a local tool instead of global
        dotnet new tool-manifest --force
        dotnet tool install docfx --version 2.78.3

        # Verify installation
        dotnet docfx --version

    - name: Build DocFX site
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p docfx/articles docfx/static

        # Copy downloaded artifacts into the site as static assets (preserve structure)
        rsync -a artifacts/ docfx/static/ 2>/dev/null || cp -R artifacts/* docfx/static/ 2>/dev/null || true

        # Generate index with links to JSON/TXT from each runner artifact
        {
          echo "# Build Information"
          echo
          echo "This site lists collected build information (JSON and TXT) from each runner."
          echo
          if ls artifacts >/dev/null 2>&1; then
            for dir in artifacts/*; do
              [ -d "$dir" ] || continue
              name="$(basename "$dir")"
              echo "## ${name}"
              echo
              found=false
              while IFS= read -r -d '' file; do
                found=true
                rel=${file#artifacts/}
                base=$(basename "$file")
                echo "- [$base](static/$rel)"
              done < <(find "$dir" -maxdepth 1 -type f \( -name '*.json' -o -name '*.txt' \) -print0 | sort -z)
              if [ "$found" = false ]; then
                echo "- (no JSON/TXT files found)"
              fi
              echo
            done
          else
            echo "No artifacts were found to display."
          fi
        } > docfx/index.md

        # Minimal DocFX configuration outputting to docfx/build
        cat > docfx/docfx.json << 'EOF'
        {
          "build": {
            "content": [
              { "files": [ "index.md" ] }
            ],
            "resource": [
              { "files": [ "static/**" ] }
            ],
            "dest": "build",
            "globalMetadata": {
              "_enableSearch": "true"
            }
          }
        }
        EOF

        dotnet docfx docfx/docfx.json

    - name: Upload built site
      uses: actions/upload-artifact@v4
      with:
        name: github-pages-site
        path: docfx/build

  deploy-site:
    needs: generate-site
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Download built site
      uses: actions/download-artifact@v4
      with:
        name: github-pages-site
        path: site

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: site

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
